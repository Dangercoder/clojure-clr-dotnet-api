(ns user
  (:require [clojure.string]))

(defn load-all-assemblies-in-directory [directory-path]
  (println "Loading assemblies in: " directory-path)
  (doseq [file-path (->> (System.IO.Directory/GetFiles directory-path)
                         (filter (fn [file-name] (clojure.string/includes? file-name ".dll"))))]
    (try
      #_{:clj-kondo/ignore [:unresolved-symbol]}
      (assembly-load-from file-path)
      (catch Exception _))))

(def assembly-directory-microsoft-netcore-app (-> (int 32)
                                                  (.GetType)
                                                  .Assembly
                                                  .-Location
                                                  System.IO.Path/GetDirectoryName))

(def assembly-directory-microsoft-asp-netcore-app (clojure.string/replace assembly-directory-microsoft-netcore-app #"Microsoft.NETCore.App" "Microsoft.AspNetCore.App"))

(defn get-packages-path [json-object]
  (-> (.get_Item json-object "project")
      (.get_Item "restore")
      (.get_Item "packagesPath")
      (.ToString)))

(defn get-original-target-frameworks [json-object]
  (map #(.ToString %) (-> (.get_Item json-object "project")
                          (.get_Item "restore")
                          (.get_Item "originalTargetFrameworks"))))

(defn dict-to-map [^System.Collections.IDictionary dict]
  (into {} (for [[k v] dict] [k v])))

(defn ->package-opts-runtime [x]
               (map (fn [[package-name package-opts]]
                      [package-name (dict-to-map (.get_Item package-opts "runtime"))])
                    x))

(defn get-target-packages [json-object target-framework]
          (-> json-object
               (.get_Item "targets")
               (.get_Item ^String target-framework)
               dict-to-map
              ->package-opts-runtime))

(load-all-assemblies-in-directory assembly-directory-microsoft-netcore-app)
(load-all-assemblies-in-directory assembly-directory-microsoft-asp-netcore-app)

(import '[System.Text.Json JsonDocument JsonElement]
        '[System.IO StreamReader]
        '[System.Text.Json JsonDocumentOptions JsonSerializer JsonSerializerOptions])

(def json-document-options (new JsonDocumentOptions))

(def json-serializer-options (new JsonSerializerOptions))

(defn ->json-object [s]
  (System.Text.Json.Nodes.JsonNode/Parse ^String s nil json-document-options))

(defn parse-project-assets [project-assets-path]
  (with-open [stream-reader (StreamReader. project-assets-path)]
    (let [json-string (.ReadToEnd stream-reader)
          json-object (->json-object json-string)]
      json-object)))

(defn load-nuget-packages!
  "Loads all nuget packages and their dependencies."
  []
  (let [project-assets-json-object  (parse-project-assets "obj/project.assets.json")
        packages-path (get-packages-path project-assets-json-object)
        original-target-frameworks (get-original-target-frameworks project-assets-json-object)]
    (doseq [original-target-framework original-target-frameworks]
      (println original-target-framework)
      (doseq [[package-name package-opts] (get-target-packages project-assets-json-object original-target-framework)]
         (println package-name)
        (let [dll-path (str packages-path (clojure.string/lower-case  package-name) "/" (first (first package-opts)))]
          (when (clojure.string/includes? dll-path ".dll")
            (try
              (println (assembly-load-from dll-path))
              (catch Exception e
              ;; swallow.
                ))))))))

(load-nuget-packages!)
