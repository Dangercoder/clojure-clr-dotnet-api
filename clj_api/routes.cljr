(ns clj-api.routes
  (:require [clj-api.interop.dotnet.app :refer [map-get map-post map-health-checks]]
            [clj-api.interop.npgsql.core :as npgsql]
            [clj-api.honey.sql :as sql]
            [clj-api.logging :as log]
            [clojure.core.async :as a]))

(defn handle-get-users [context datasource]
  (a/go
    (with-open [conn (a/<! (npgsql/connection! datasource))]
      (log/info "Fetching users")
      (assoc context
             :response/body (a/<! (npgsql/execute! conn (sql/format {:select [:*]
                                                                     :from [:dotnet.user]})))
             :response/status 200))))

;; TODO
(defn create-user [conn user]
  (let [query {:insert-into [:dotnet.user]
               :columns [:first_name :last_name :email :date_of_birth]
               :values  [(:first_name user)
                         (:last_name user)
                         (:email user)
                         (DateTime/Parse (:date_of_birth user))]}]
    ;;(npgsql/execute! conn (sql/format query))
    (a/go 1)))

(defn handle-create-user [context datasource]
  (a/go
    (with-open [conn (a/<! (npgsql/connection! datasource))]
      (let [data (:request/body context)
            _insertUser (a/<! (create-user conn data))]
        (log/info "Created user: {@User}" data)
        (assoc context
               :response/body {}
               :response/status 200)))))

(defn handle-default-route [context]
  (a/go
    (assoc context
           :response/status 200
           :response/body
           {"powered-by" "clojure-clr"})))

(defn configure-routes [app datasource]
  (-> app
      (map-get "/" handle-default-route)
      (map-get "/users" (fn [context] (handle-get-users context datasource)))
      (map-post "/user" (fn [context] (handle-create-user context datasource)))
      (map-health-checks "/healthz")))